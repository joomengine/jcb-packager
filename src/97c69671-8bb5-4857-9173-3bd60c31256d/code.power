	/**
	 * Generate the main README for the JCB Fields repository in Markdown format.
	 *
	 * Fields define the structure, behavior, and storage of data throughout various
	 * JCB-managed entities and are central to the Joomla component architecture.
	 *
	 * @param  array  $items  All Field definitions in this repository.
	 *
	 * @return string  The full generated Markdown README.
	 * @since  5.1.1
	 */
	public function get(array $items): string
	{
		$readme = [];

		// Title
		$readme[] = '# JCB! Fields';
		$readme[] = '';

		// Introduction
		$readme[] = '### What Are Fields?';
		$readme[] = <<<MD
Fields are the **foundation** of every Joomla Component Builder (JCB) project.

They define how data is **stored**, **validated**, **rendered**, and **interacted with** in your Joomla extensions.

Fields let you control everything from the **underlying database schema** to the **user interface**, all within a single configuration.

Each Field:
- Defines **database structure** (type, size, default, null, unique keys, indexes)
- Binds to a **fieldtype**, determining HTML rendering and behavior
- Supports per-field **custom PHP** for model saving and retrieval
- Allows styling and scripting (HTML attributes, JS, CSS)
- Automatically generates Joomla-compliant XML field definitions

MD;

		// Scope of Use
		$readme[] = '### Where Are Fields Used in JCB?';
		$readme[] = <<<MD
Fields are universal integrated — they are used in, highly structured areas:

- ✅ **Admin Views** (the native Joomla back-end editing views)
- ✅ **Modules** (frontend display configurations)
- ✅ **Plugins** (event-driven integrations)
- ✅ **Component Configurations** (global parameter settings)

MD;

		// Field Capabilities
		$readme[] = '### What Can a Field Do?';
		$readme[] = <<<MD
A Field in JCB can define:

- **Database Type & Schema**: `int`, `varchar`, `json`, custom, nullable, defaults, indexes
- **Permissions**: who can view/edit the field (ACL)
- **Rendering Options**: HTML classes, labels, JS behaviors
- **Model Integration**: how the value is saved or retrieved
- **Dynamic Logic**: PHP hooks for `onGet`, `onSave`, `onPrepareForm`, etc.
- **Fieldtypes**: link to rich behaviors like Model Selects, Subforms, Toggle Switches, Encrypted Fields, etc.

This centralization makes field management efficient and highly reusable.

MD;

		// Reusability
		$readme[] = '### Reuse and Sharing';
		$readme[] = <<<MD
Fields are standalone entities:

- Define once, **reuse across multiple Admin Views**, Modules, or Plugins
- Fields can also be exported and shared via repositories
- JCB will automatically adjust them to fit into each consuming context

This means less duplication, and greater consistency across your entire component structure.

MD;

		// Versioning / Sync
		$readme[] = '### Versioning and Customization';
		$readme[] = <<<MD
To update a field:

- Click **"reset"** in the JCB UI to sync with this repository
- Or **fork** this repository, customize the field, and point JCB to your fork

This preserves version control while allowing your own field improvements to live independently.

>Fields define both structure and behavior — they are where your data comes alive.

---
MD;

		// Index section
		$readme[] = '### Index of Fields';
		$readme[] = '';

		// Add index
		$readme[] = $this->getIndex($items);
		$readme[] = '';
[CUSTOMCODE=mainReadmePackageFooter]

		return implode("\n", $readme);
	}