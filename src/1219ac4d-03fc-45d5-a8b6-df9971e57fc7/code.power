	/**
	 * Generate the main README for the JCB Dynamic Gets repository in Markdown format.
	 *
	 * Dynamic Gets serve as visual query definitions, enabling the creation of reusable,
	 * relational SQL queries via a GUI. This method produces a comprehensive Markdown
	 * README to describe their purpose and usage across JCB.
	 *
	 * @param  array  $items  All dynamic get entries stored in the repository.
	 *
	 * @return string  The full generated Markdown README.
	 * @since  5.1.1
	 */
	public function get(array $items): string
	{
		$readme = [];

		// Header
		$readme[] = '# JCB! Dynamic Gets';
		$readme[] = '';

		// Overview
		$readme[] = '### What Are Dynamic Gets?';
		$readme[] = <<<MD
Dynamic Gets in JCB are **graphically designed database queries** that define how data should be fetched,  
joined, filtered, and structured using a **easy selection query builder** interface.

They act as a visual abstraction over SQL joins and filters, comparable to:

- **Visual Query Builders**
- **ORM Relationship Graphs**
- **Custom Query Composition Engines**

Dynamic Gets allow you to:
- Choose a **primary table**
- Join **multiple related tables**
- Select fields from across those joins
- Apply **filters**, **WHERE clauses**, **ordering**, and **grouping** — all from within a GUI.

JCB then auto-generates:
- The complete **SQL JOIN** logic
- Any **Joomla-compliant API interaction**
- The **PHP model code** required to support the query

---
MD;

		// Use in Views
		$readme[] = '### How Do Dynamic Gets Integrate Into Views?';
		$readme[] = <<<MD
Each **Site View** or **Custom Admin View** requires a **main Dynamic Get**,  
which defines how its item or list data is fetched from the database.

But that's not all: you can attach multiple additional Dynamic Gets to a single view,  
enabling you to **merge data from completely different tables** — dynamically, cleanly, and consistently.

JCB intelligently ensures that the resulting component:
- Uses secure and efficient Joomla API calls
- Avoids repetitive logic
- Embeds the Dynamic Get logic **directly into the component's models**

This eliminates the need for hand-crafted query code, while maintaining full control and extensibility.

---
MD;

		// Customization model
		$readme[] = '### Reset, Fork, or Customize';
		$readme[] = <<<MD
Just like other JCB entities, Dynamic Gets support a Git-based update workflow:

- **Init**: Pull from a remote repository
- **Reset**: Sync with upstream versions
- **Push**: Submit updates (if you have write access)
- **Fork**: Maintain your own version of dynamic queries

This lets you customize, evolve, and share query logic without rewriting or copy-pasting.

Whether you're building for:
- Deep reporting
- Cross-table analytics
- Complex filter-based list views

> Dynamic Gets combine power, flexibility, and GUI-driven convenience — helping you build smarter, faster, and more maintainable Joomla components.

---
MD;

		// Index header
		$readme[] = '### Index of Dynamic Gets';
		$readme[] = '';

		// Include the index
		$readme[] = $this->getIndex($items);
		$readme[] = '';
[CUSTOMCODE=mainReadmePackageFooter]

		return implode("\n", $readme);
	}