	/**
	 * Get all linked fields of an area/view/table
	 *
	 * @param   string  $table     The area
	 *
	 * @return  array  An array of fields
	 * @since   5.2.1
	 */
	public function linked(string $table): array
	{
		// Retrieve fields from the specified table
		$fields = $this->get($table);

		if ($fields === null)
		{
			return [];
		}

		$linked = [];

		foreach ($fields as $name => $field)
		{
			if ($this->isValidLinkedField($field))
			{
				$linked[$name] = $field['link'];
			}

			if ($this->isSubformField($field))
			{
				$this->traverseSubformLinkedFields($name, $field['fields'], $linked);
			}
		}

		return $linked;
	}

	/**
	 * Get all incoming link dependencies pointing to the given entity.
	 *
	 * This method returns a map of `$entity` field keys to an array of referencing tables and fields.
	 *
	 * @param   string  $entity  The target entity name being linked to (e.g., 'power').
	 *
	 * @return  array  An associative array: [targetField => [['table' => string, 'name' => string], ...]]
	 * @since   5.2.1
	 */
	public function dependencies(string $entity): array
	{
		$result = [];

		foreach ($this->tables as $table => $fields)
		{
			foreach ($fields as $name => $field)
			{
				$link = $field['link'] ?? null;

				if ($this->isValidDependencyField($link, $entity))
				{
					$entity_field = $link['key'];
					$result[$entity_field][] = [
						'table' => "#__[[[component]]]_{$table}",
						'entity' => $table,
						'key'  => $name
					];
				}

				if ($this->isSubformField($field))
				{
					$this->traverseSubformDependencies($table, $name, $field['fields'], $entity, $result);
				}
			}
		}

		return $result;
	}

	/**
	 * Loops over the $table fields and builds a new array
	 *    that hold all the fields to be searched in a specific area of JCB
	 *
	 * @param string  $table  The target table to search
	 * @param string  $area   The target areas to search
	 *
	 * @return array The newly built array.
	 * @since  5.1.0
	 */
	public function search(string $table, string $area): array
	{
		$result = [];

		$fields = $this->get($table) ?? [];

		// Loop over each field in the current table.
		foreach ($fields as $fieldName => $fieldProperties)
		{
			// Check if the field type is one of the target types.
			if ($area === 'code')
			{
				if (isset($fieldProperties['type']) && isset($fieldProperties['db']['type']) &&
					in_array($fieldProperties['type'], ['text', 'textarea', 'editor'], true) &&
					in_array($fieldProperties['db']['type'], ['MEDIUMTEXT', 'TEXT'], true))
				{
					$result[$fieldName] = $fieldName;
				}
			}
			elseif ($area === 'placeholders')
			{
				if (isset($fieldProperties['type']) &&
					in_array($fieldProperties['type'], ['text', 'textarea', 'editor'], true))
				{
					$result[$fieldName] = $fieldName;
				}
			}
		}

		return $result;
	}

	/**
	 * Recursively traverses subform fields to collect valid linked fields
	 *
	 * @param   string $name    The current field name
	 * @param   array  $fields  The current set of subform fields
	 * @param   array  &$linked The reference bucket to collect linked fields
	 *
	 * @return  void
	 * @since   5.2.1
	 */
	private function traverseSubformLinkedFields(string $name, array $fields, array &$linked): void
	{
		foreach ($fields as $sub_name => $field)
		{
			$key_name = $name . '|' . $sub_name;
			if ($this->isValidLinkedField($field))
			{
				$linked[$key_name] = $field['link'];
			}

			if ($this->isSubformField($field))
			{
				$this->traverseSubformLinkedFields($key_name, $field['fields'], $linked);
			}
		}
	}

	/**
	 * Recursively traverses subform fields to collect valid dependencies
	 *
	 * @param   string $table         The current table name
	 * @param   string $name          The current field name
	 * @param   array  $fields        The current set of subform fields
	 * @param   array  &$result       The reference bucket to collect linked fields
	 *
	 * @return  void
	 * @since   5.2.1
	 */
	private function traverseSubformDependencies(string $table, string $name, array $fields,
		string $entity, array &$result): void
	{
		foreach ($fields as $sub_name => $field)
		{
			$link = $field['link'] ?? null;
			$key_name = $name . '|' . $sub_name;

			if ($this->isValidDependencyField($link, $entity))
			{
				$entity_field = $link['key'];
				$result[$entity_field][] = [
					'table' => "#__[[[component]]]_{$table}",
					'entity' => $table,
					'key'  => $key_name
				];
			}

			if ($this->isSubformField($field))
			{
				$this->traverseSubformDependencies($table, $key_name, $field['fields'], $entity, $result);
			}
		}
	}

	/**
	 * Validates that the given field represents a well-formed subform.
	 *
	 * @param   array  $field  The field metadata array from the table map.
	 *
	 * @return  bool  True if the field has a valid subform; false otherwise.
	 * @since   5.2.1
	 */
	private function isSubformField(array $field): bool
	{
		$type = $field['type'] ?? null;
		$fields = $field['fields'] ?? null;

		return $type === 'subform' && !empty($fields);
	}

	/**
	 * Validates that the given field represents a well-formed outgoing link.
	 *
	 * @param   array  $field  The field metadata array from the table map.
	 *
	 * @return  bool  True if the field has a valid outgoing link; false otherwise.
	 * @since   5.2.1
	 */
	private function isValidLinkedField(array $field): bool
	{
		$link = $field['link'] ?? null;

		return is_array($link)
			&& ($link['type'] ?? 0) === 1
			&& !empty($link['entity'])
			&& !empty($link['table'])
			&& !empty($link['key']);
	}

	/**
	 * Validates that the provided link config represents a valid dependency on the given entity.
	 *
	 * @param   array|null  $link     The 'link' metadata from a field definition.
	 * @param   string      $entity   The entity to which the field must link.
	 *
	 * @return  bool  True if the field represents a valid type-1 dependency to the entity.
	 * @since   5.2.1
	 */
	private function isValidDependencyField(?array $link, string $entity): bool
	{
		return is_array($link)
			&& ($link['type'] ?? 0) === 1
			&& !empty($link['entity'])
			&& !empty($link['table'])
			&& !empty($link['key'])
			&& $link['entity'] === $entity;
	}